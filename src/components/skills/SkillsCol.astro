---
const { label, percentage, color } = Astro.props;
---

<div
  class="bg-secondary flex flex-col justify-center gap-4 min-h-[5rem] rounded-lg card skill-card hover-card"
  data-percentage={percentage}
  data-color={color}
>
  <div class="px-4 pt-4 flex items-center gap-4 flex-grow">
    <div class="skill-icon"><slot /></div>
    <div class="flex-grow font-bold skill-label">{label}</div>
  </div>
  <div class="h-1 percentage-bar"></div>    
</div>

<style define:vars={{ percentage, color }}>
  .hover-card {
    position: relative;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    cursor: pointer;
    overflow: hidden;
  }

  /* Card lift and glow effect */
  .hover-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3), 
                0 0 20px rgba(100, 255, 218, 0.2),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
    background: linear-gradient(135deg, 
                rgba(100, 255, 218, 0.05) 0%, 
                rgba(17, 34, 64, 0.95) 50%, 
                rgba(100, 255, 218, 0.03) 100%);
  }

  /* Animated gradient border */
  .hover-card::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, 
                var(--color, #64ffda), 
                transparent, 
                var(--color, #64ffda));
    border-radius: inherit;
    opacity: var(--border-opacity, 0);
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .hover-card:hover::before {
    opacity: 0.7;
    animation: border-glow 2s ease-in-out infinite alternate;
  }

  @keyframes border-glow {
    0% {
      filter: hue-rotate(0deg);
    }
    100% {
      filter: hue-rotate(90deg);
    }
  }

  /* Enhanced progress bar */
  .percentage-bar {
    width: 0%;
    background: linear-gradient(90deg, 
                var(--color, #64ffda) 0%, 
                rgba(255, 255, 255, 0.3) 50%, 
                var(--color, #64ffda) 100%);
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    border-radius: 0 0 8px 8px;
    position: relative;
    overflow: hidden;
  }

  /* Progress bar shine effect */
  .percentage-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: var(--shine-position, -100%);
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
                transparent, 
                rgba(255, 255, 255, 0.4), 
                transparent);
    transition: left 0.6s ease;
  }

  .hover-card:hover .percentage-bar::after {
    left: 100%;
  }

  /* Icon animations */
  .skill-icon {
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    position: relative;
  }

  .hover-card:hover .skill-icon {
    transform: scale(1.15) rotateY(360deg);
    filter: drop-shadow(0 0 10px var(--color, #64ffda));
  }

  /* Label glow effect */
  .skill-label {
    transition: all 0.3s ease;
    position: relative;
  }

  .hover-card:hover .skill-label {
    color: var(--color, #64ffda);
    text-shadow: 0 0 10px var(--color, #64ffda), 
                 0 0 20px var(--color, #64ffda);
  }

  /* Floating particles effect */
  .hover-card:hover::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 4px;
    height: 4px;
    background: var(--color, #64ffda);
    border-radius: 50%;
    opacity: 0;
    animation: particle-float 1.5s ease-out;
    transform: translate(-50%, -50%);
  }

  @keyframes particle-float {
    0% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(0);
    }
    50% {
      opacity: 0.8;
      transform: translate(-50%, -70px) scale(1);
    }
    100% {
      opacity: 0;
      transform: translate(-50%, -100px) scale(0);
    }
  }

  /* Pulse animation for high-skill cards */
  .hover-card[data-percentage*="9"]:not(:hover),
  .hover-card[data-percentage="100%"]:not(:hover) {
    animation: pulse-glow 3s ease-in-out infinite;
  }

  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 5px rgba(100, 255, 218, 0.1);
    }
    50% {
      box-shadow: 0 0 20px rgba(100, 255, 218, 0.2);
    }
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .hover-card:hover {
      transform: translateY(-4px) scale(1.01);
    }
    
    .hover-card:hover .skill-icon {
      transform: scale(1.1) rotateY(180deg);
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    if (typeof gsap !== 'undefined') {
      
      // Set initial state for all cards
      gsap.set('.skill-card', { 
        y: 80, 
        opacity: 0, 
        scale: 0.7,
        rotateX: -45,
        visibility: 'hidden'
      });

      // Set initial state for progress bars
      gsap.set('.percentage-bar', { 
        width: '0%'
      });

      // Function to play hover animation effects
      function playHoverEffects(card) {
        const icon = card.querySelector('.skill-icon');
        const progressBar = card.querySelector('.percentage-bar');
        
        // Card background effects (lift, glow, gradient)
        gsap.to(card, {
          y: -8,
          scale: 1.02,
          duration: 0.4,
          ease: "power2.out",
          onComplete: () => {
            // Reset card background effects
            gsap.to(card, {
              y: 0,
              scale: 1,
              duration: 0.4,
              ease: "power2.out",
              delay: 0.6
            });
          }
        });

        // Apply CSS hover styles temporarily
        gsap.set(card, {
          boxShadow: "0 20px 40px rgba(0, 0, 0, 0.3), 0 0 20px rgba(100, 255, 218, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.1)",
          background: "linear-gradient(135deg, rgba(100, 255, 218, 0.05) 0%, rgba(17, 34, 64, 0.95) 50%, rgba(100, 255, 218, 0.03) 100%)"
        });

        // Reset background after animation
        setTimeout(() => {
          gsap.set(card, {
            boxShadow: "none",
            background: ""
          });
        }, 1000);

        // Border glow effect
        const beforeElement = window.getComputedStyle(card, '::before');
        gsap.to(card, {
          '--border-opacity': 0.7,
          duration: 0.3,
          onComplete: () => {
            gsap.to(card, {
              '--border-opacity': 0,
              duration: 0.3,
              delay: 0.4
            });
          }
        });
        
        // Icon animation with bounce and spin
        gsap.to(icon, { 
          scale: 1.15, 
          rotateY: 360,
          duration: 0.6, 
          ease: "back.out(1.7)",
          onComplete: () => {
            // Reset icon after animation
            gsap.to(icon, { 
              scale: 1, 
              rotateY: 0,
              duration: 0.4, 
              ease: "power2.out" 
            });
          }
        });
        
        // Progress bar pulse effect
        gsap.to(progressBar, {
          scaleY: 1.3,
          duration: 0.25,
          ease: "power2.out",
          yoyo: true,
          repeat: 1
        });

        // Progress bar shine effect
        const progressBarAfter = progressBar.querySelector('::after');
        gsap.fromTo(progressBar, 
          { '--shine-position': '-100%' },
          { 
            '--shine-position': '100%',
            duration: 0.6,
            ease: "power2.out"
          }
        );

        // Create floating particles
        createParticles(card);
      }

      // Function to enable ongoing hover effects
      function enableHoverEffects(card) {
        card.addEventListener('mouseenter', () => {
          playHoverEffects(card);
        });
        
        card.addEventListener('mouseleave', () => {
          const icon = card.querySelector('.skill-icon');
          // Ensure icon returns to normal state on mouse leave
          gsap.to(icon, { 
            scale: 1, 
            rotateY: 0,
            duration: 0.4, 
            ease: "power2.out" 
          });
        });
      }

      // Create timeline for sequential card appearance
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: '#skills',
          start: 'top 70%',
          toggleActions: "play none none none"
        }
      });

      // Add each card to timeline with sequential delay
      gsap.utils.toArray('.skill-card').forEach((card, index) => {
        // Card entrance animation
        tl.to(card, {
          y: 0,
          opacity: 1,
          scale: 1,
          rotateX: 0,
          visibility: 'visible',
          duration: 0.8,
          ease: "back.out(1.5)"
        }, index * 0.25) // 0.25s delay between each card
        
        // Add progress bar animation
        .to(card.querySelector('.percentage-bar'), {
          width: card.getAttribute('data-percentage'),
          duration: 0.3,
          ease: "power2.out"
        }, index * 0.25 + 0.4) // Start progress bar 0.4s after card starts
        
        // Play initial hover effects after card and progress bar complete
        .call(() => {
          // Play the hover animation once automatically
          setTimeout(() => {
            playHoverEffects(card);
          }, 200); // Small delay to ensure progress bar is complete
          
          // Enable ongoing hover effects
          setTimeout(() => {
            enableHoverEffects(card);
            console.log(`Card ${index + 1} hover effects enabled!`);
          }, 1000); // Enable hover after initial effect completes
        }, null, index * 0.25 + 0.9); // Trigger after progress bar completes (reduced from 1.4s to 0.9s)
      });

      // Function to create floating particles
      function createParticles(card) {
        const rect = card.getBoundingClientRect();
        const color = card.getAttribute('data-color');
        
        for (let i = 0; i < 5; i++) {
          const particle = document.createElement('div');
          particle.style.cssText = `
            position: fixed;
            width: 3px;
            height: 3px;
            background: ${color};
            border-radius: 50%;
            pointer-events: none;
            z-index: 1000;
            left: ${rect.left + rect.width/2 + (Math.random() - 0.5) * 40}px;
            top: ${rect.top + rect.height/2}px;
            box-shadow: 0 0 6px ${color};
          `;
          
          document.body.appendChild(particle);
          
          gsap.to(particle, {
            x: (Math.random() - 0.5) * 120,
            y: -80 - Math.random() * 60,
            opacity: 0,
            scale: 0,
            duration: 1.5,
            delay: i * 0.08,
            ease: "power2.out",
            onComplete: () => particle.remove()
          });
        }
      }
    }
  });
</script>
